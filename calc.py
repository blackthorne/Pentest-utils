#!/usr/bin/env python
# encoding: utf-8
__description__ = 'a tool for my very delicate command line calculations'
__author__ = 'Francisco da Gama Tabanez Ribeiro'
__version__ = '0.1'
__date__ = '2012/5/09'
__license__ = 'WTFPL'

import sys, argparse

def asciiconv(elms):
	if type(elms) == 'str':
		return [ord(el) for el in elms]
	elif type(elms) == 'list':
		return [chr(el) for el in elms]

def numencode(elms, formatin, formatout='dec'):
	return [el.encode(formatout) for el in elms]

# bitwise XOR operation
def strxor(a, b):
	return [ord(a) ^ ord(b) for a,b in zip(s1,s2)]
	
#print sys.argv[1],sys.argv[2]
#print strxor(sys.argv[1],sys.argv[2])

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description=__description__,
		                             epilog='for simple hex, dec, bin conversions and some bitwise operations')	           
	parser.add_argument('value',type=str,nargs='?',
		                help='value to be converted')
	parser.add_argument('-in', metavar='input format', default='dec', type=str, nargs=1,
		           dest='informat', help='define input format from: dec, hex, oct, bin')
	parser.add_argument('-out', metavar='output format', default='dec', type=str, nargs=1,
		           dest='outformat', help='define output format from: dec, hex, oct, bin')
	parser.add_argument('-a', '-analyze', dest='analyze', help='show more details whenever possible (expands shadow files fields,...)', required=False, action='store_true')
	parser.add_argument('-f','-file', dest='filename', nargs=1, help='load a file')
	parser.add_argument('-l','-list', dest='list', help='lists supported algorithms', required=False, action='store_true')
	args=parser.parse_args()
